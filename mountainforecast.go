package metoffice

import (
	"fmt"
	"time"
)

//type AutoGenerated struct {
//	MountainForecastList struct {
//		MountainForecast []struct {
//			DataDate time.Time `json:"DataDate"`
//			ValidFrom time.Time `json:"ValidFrom"`
//			ValidTo time.Time `json:"ValidTo"`
//			CreatedDate time.Time `json:"CreatedDate"`
//			URI string `json:"URI"`
//			Area string `json:"Area"`
//			Risk string `json:"Risk"`
//		} `json:"MountainForecast"`
//	} `json:"MountainForecastList"`
//}

// MountainForecast has the data for each of the forecast areas that the metoffice
// provides, with validity data and destination URL.
type MountainForecastItem struct {
	DataDate   time.Time `mapstructure:"DataDate"`
	ValidFrom  time.Time `mapstructure:"ValidFrom"`
	ValidTo    time.Time `mapstructure:"ValidTo"`
	CreateDate time.Time `mapstructure:"CreateDate"`
	URI        string    `mapstructure:"URI"`
	Area       string    `mapstructure:"Area"`
	Risk       string    `mapstructure:"Risk"`
}

type MountainForecastList struct {
	MountainForecast []MountainForecastItem `mapstructure:"MountainForecast"`
}

type MountainForecastListInput struct {
	MountainForecastList MountainForecastList `mapstructure:"MountainForecastList"`
}

// ListMountainForecast lists all the mountain areas available from the Metoffice
func (c *Client) ListMountainForecasts() (*MountainForecastList, error) {
	path := fmt.Sprintf("/public/data/txt/wxfcs/mountainarea/%s/capabilities", "json")
	resp, err := c.Get(path, nil)
	if err != nil {
		return nil, err
	}

	var b *MountainForecastListInput
	if err := decodeJSON(&b, resp.Body); err != nil {
		return nil, err
	}

	return &b.MountainForecastList, nil
}
